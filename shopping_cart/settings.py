"""
Django settings for shopping_cart project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
import dotenv
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

dotenv_file = os.path.join(BASE_DIR, ".env")
if os.path.isfile(dotenv_file):
    dotenv.load_dotenv(dotenv_file)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ['DEBUG']

ALLOWED_HOSTS = os.environ['ALLOWED_HOSTS'].split(" ")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mozilla_django_oidc',
    'rest_framework',
    'django_nose',
    'user_app',
    'api_app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'shopping_cart.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'shopping_cart.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

'''DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}'''

'''DATABASES = {
    'default': {
        "ENGINE" : os.environ.get("SQL_ENGINE", 'django.db.backends.sqlite3'),
        "NAME" : os.environ.get("SQL_NAME",  BASE_DIR / 'db.sqlite3'),
        "USER" : os.environ.get("SQL_USER", "USER"),
        "PASSWORD" : os.environ.get("SQL_PASSWORD", "password"),
        "HOST" : os.environ.get("SQL_HOST", "localhost"),
        "PORT" : os.environ.get("SQL_PORT", "5432"),
    }
}'''

if os.environ.get('GITHUB_WORKFLOW'):
    DATABASES = {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'github_actions',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
else:
    DATABASES = {
        'default': {
            "ENGINE" : os.environ.get("SQL_ENGINE", 'django.db.backends.sqlite3'),
            "NAME" : os.environ.get("SQL_NAME",  BASE_DIR / 'db.sqlite3'),
            "USER" : os.environ.get("SQL_USER", ""),
            "PASSWORD" : os.environ.get("SQL_PASSWORD", ""),
            "HOST" : os.environ.get("SQL_HOST", ""),
            "PORT" : os.environ.get("SQL_PORT", ""),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # ...
        'mozilla_django_oidc.contrib.drf.OIDCAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        # 'oidc_auth.authentication.JSONWebTokenAuthentication',
        # 'oidc_auth.authentication.BearerTokenAuthentication',
    ),
}

'''
Custom user model
'''
AUTH_USER_MODEL = 'user_app.User'

'''
Custom backends
'''
AUTHENTICATION_BACKENDS = (
    # 'mozilla_django_oidc.auth.OIDCAuthenticationBackend',
    'auth.CustomOIDCAuthenticationBackend',
    'django.contrib.auth.backends.ModelBackend',
)

'''
OIDC Settings
'''
#vOIDC_DRF_AUTH_BACKEND = 'mozilla_django_oidc.auth.OIDCAuthenticationBackend'
OIDC_OP_JWKS_ENDPOINT = "https://www.googleapis.com/oauth2/v3/certs"
OIDC_OP_AUTHORIZATION_ENDPOINT = 'https://accounts.google.com/o/oauth2/v2/auth' 
OIDC_OP_TOKEN_ENDPOINT = 'https://oauth2.googleapis.com/token'
OIDC_OP_USER_ENDPOINT = 'https://openidconnect.googleapis.com/v1/userinfo'
OIDC_RP_SIGN_ALGO="RS256"
OIDC_RP_SCOPES="openid email profile"
OIDC_RP_CLIENT_ID = os.environ['NEW_CLIENT_ID']
OIDC_RP_CLIENT_SECRET = os.environ['NEW_CLIENT_SECRET']
OIDC_STORE_ACCESS_TOKEN=True
OIDC_STORE_ID_TOKEN=True

'''
LOGIN/OUT CONFIG
'''
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/accounts/login/"


'''
TESTS settings: use nose to run all tests
'''
TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'

NOSE_ARGS = [
    # '--cover-html',
    '--with-coverage',
    '--cover-package=api_app, user_app',
]